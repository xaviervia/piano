#!/usr/bin/env ruby
require "piano"
require "metafun/delegator"

unless ARGV.empty?
  
  args = {}
  
  ARGV.each do |arg|
    if arg =~ /^\d+$/
      args[:port] = arg
    elsif arg =~ /^noetags$/
      args[:etags] = :off
    elsif arg == "-v"
      puts Piano::VERSION
      Process.exit!
    elsif arg =~ /^views:/
      matches = arg.match(/^views:(.+)$/)
      args[:views] = matches[1]
    elsif arg =~ /^public:/
      matches = arg.match(/^public:(.+)$/)
      args[:public] = matches[1]
    elsif arg =~ /^[a-z]+$/
      args[:environment] = arg.to_sym
    end
  end

end

if args
  Piano::Base.port          = args[:port]  if args[:port]
  Piano::Base.environment   = args[:environment] if args[:environment]
  Piano::Base.etags         = args[:etags] if args[:etags]
  Piano::Base.views         = args[:views] if args[:views]
  Piano::Base.public        = args[:public] if args[:public]
end

self.extend Metafun::Delegator
self.delegate Piano::Base,  :get, :patch, :put, :post, :delete, 
                      :head, :options, :template, :fetch, :layout,
                      :before, :after, :error, :not_found, 
                      :configure, :set, :mime_type, :enable, 
                      :disable, :use, :development?, :test?, 
                      :production?, :helpers, :settings, :play!

self.helpers Sinatra::Piano

$LOAD_PATH << Dir.pwd

if File.exists?("Pianofile")
  puts "Pianofile found, loading..."
  load "Pianofile"
end

if File.directory?("controllers")
  puts "'controllers' directory found, loading '.controller' files"
  Piano::ControllerLoader.folder "controllers" 
end

require "piano/routes"

puts "Starting Sinatra from Piano #{Piano::VERSION}"
Piano::Base.play!
